name: Run DataGenerator Utility

on:
  workflow_dispatch:
    inputs:
      rows:
        description: 'Number of rows to generate'
        required: false
        default: '10'
      max_workers:
        description: 'Number of workers to use'
        required: false
        default: 4
      max_memory_mb:
        description: 'Memory limit in MB'
        required: false
        default: 1024
      input_method:
        description: 'Input method for JSON file'
        required: true
        type: choice
        options:
          - 'url'
          - 'repository_file'
        default: 'repository_file'

      file_url:
        description: 'URL of JSON file (if input_method is "url")'
        required: false
        default: 'https://raw.githubusercontent.com/sunnygupta4197/DataGenerator/master/examples/example5.json'
      repository_file_path:
        description: 'Repository file path (if input_method is "repository_file")'
        required: false
        default: 'examples/example3.json'

      notification_level:
        description: '🔔 Notification level'
        required: false
        type: choice
        options:
          - 'basic'           # Just workflow summary
          - 'enhanced'        # Summary + issue comments
          - 'team'           # Summary + Slack
          - 'enterprise'     # Summary + Slack + webhooks
          - 'custom'         # Use custom notification config
        default: 'enhanced'
      slack_webhook_url:
        description: '📱 Slack webhook URL (for team/enterprise levels)'
        required: false
      custom_webhook_url:
        description: '🔗 Custom webhook URL (for enterprise/custom levels)'
        required: false
      email_address:
        description: '📧 Email for notifications (generates email content)'
        required: false

  # Issue-based file upload trigger
  issues:
    types: [opened, edited]

  # Pull request based file upload
  pull_request:
    paths: ['uploads/**/*.json']
    types: [opened, synchronize]

# Required permissions
permissions:
  contents: read
  actions: read
  issues: write
  pull-requests: write
  id-token: write

# Global environment variables for optimization
env:
  PYTHONUNBUFFERED: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_COLOR: 1

jobs:
  # Main job for manual workflow dispatch
  run-script-manual:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: 📢 Initialize and configure notifications
        id: init
        run: |
          echo "🚀 DataGenerator workflow starting..."
          echo "🔔 Notification level: ${{ github.event.inputs.notification_level }}"
          
          # Set notification flags based on level
          LEVEL="${{ github.event.inputs.notification_level }}"
          case $LEVEL in
            "basic")
              ENABLE_SUMMARY="true"
              ENABLE_SLACK="false"
              ENABLE_ISSUES="false"
              ENABLE_WEBHOOK="false"
              ENABLE_EMAIL="false"
              ;;
            "enhanced")
              ENABLE_SUMMARY="true"
              ENABLE_SLACK="false"
              ENABLE_ISSUES="true"
              ENABLE_WEBHOOK="false"
              ENABLE_EMAIL="false"
              ;;
            "team")
              ENABLE_SUMMARY="true"
              ENABLE_SLACK="true"
              ENABLE_ISSUES="true"
              ENABLE_WEBHOOK="false"
              ENABLE_EMAIL="false"
              ;;
            "enterprise")
              ENABLE_SUMMARY="true"
              ENABLE_SLACK="true"
              ENABLE_ISSUES="true"
              ENABLE_WEBHOOK="true"
              ENABLE_EMAIL="true"
              ;;
            "custom")
              ENABLE_SUMMARY="true"
              ENABLE_SLACK="${{ github.event.inputs.slack_webhook_url != '' && 'true' || 'false' }}"
              ENABLE_ISSUES="true"
              ENABLE_WEBHOOK="${{ github.event.inputs.custom_webhook_url != '' && 'true' || 'false' }}"
              ENABLE_EMAIL="${{ github.event.inputs.email_address != '' && 'true' || 'false' }}"
              ;;
            *)
              ENABLE_SUMMARY="true"
              ENABLE_SLACK="false"
              ENABLE_ISSUES="false"
              ENABLE_WEBHOOK="false"
              ENABLE_EMAIL="false"
              ;;
          esac
          
          # Set outputs for all steps
          echo "enable_summary=$ENABLE_SUMMARY" >> $GITHUB_OUTPUT
          echo "enable_slack=$ENABLE_SLACK" >> $GITHUB_OUTPUT
          echo "enable_issues=$ENABLE_ISSUES" >> $GITHUB_OUTPUT
          echo "enable_webhook=$ENABLE_WEBHOOK" >> $GITHUB_OUTPUT
          echo "enable_email=$ENABLE_EMAIL" >> $GITHUB_OUTPUT
          echo "start_time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_OUTPUT
          echo "run_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
          
          echo "📊 Notification configuration:"
          echo "  - Summary: $ENABLE_SUMMARY"
          echo "  - Slack: $ENABLE_SLACK"
          echo "  - Issues: $ENABLE_ISSUES"  
          echo "  - Webhook: $ENABLE_WEBHOOK"
          echo "  - Email: $ENABLE_EMAIL"

      # Workflow summary (always enabled)
      - name: 📋 Create workflow summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # 🚀 DataGenerator Started!
          
          ## 📊 Run Configuration
          | Parameter | Value |
          |-----------|-------|
          | 👤 **Triggered by** | @${{ github.actor }} |
          | 🕒 **Started at** | ${{ steps.init.outputs.start_time }} |
          | 🆔 **Run ID** | [${{ github.run_id }}](${{ steps.init.outputs.run_url }}) |
          | 📥 **Input Method** | ${{ github.event.inputs.input_method }} |
          | 📁 **Source** | ${{ github.event.inputs.input_method == 'url' && github.event.inputs.file_url || github.event.inputs.repository_file_path }} |
          | 🔔 **Notification Level** | ${{ github.event.inputs.notification_level }} |
          
          ## ⚙️ Processing Settings
          | Setting | Value |
          |---------|-------|
          | 📈 **Rows** | ${{ github.event.inputs.rows }} |
          | ⚙️ **Workers** | ${{ github.event.inputs.max_workers }} |
          | 💾 **Memory** | ${{ github.event.inputs.max_memory_mb }} MB |
          
          ## 🔔 Active Notifications
          - ${{ steps.init.outputs.enable_summary == 'true' && '✅' || '❌' }} **Workflow Summary** - This dashboard
          - ${{ steps.init.outputs.enable_slack == 'true' && '✅' || '❌' }} **Slack** - Team notifications
          - ${{ steps.init.outputs.enable_issues == 'true' && '✅' || '❌' }} **Issue Comments** - GitHub updates
          - ${{ steps.init.outputs.enable_webhook == 'true' && '✅' || '❌' }} **Custom Webhook** - API integration
          - ${{ steps.init.outputs.enable_email == 'true' && '✅' || '❌' }} **Email Preparation** - Email content
          
          ## 🔗 Quick Links
          - [📊 Live Progress](${{ steps.init.outputs.run_url }})
          - [📋 All Runs](https://github.com/${{ github.repository }}/actions)
          - [📁 Repository](https://github.com/${{ github.repository }})
          
          ---
          ⏳ **Status**: Processing... (will update on completion)
          EOF

      # Conditional Slack notification
      - name: 📱 Send Slack start notification
        if: steps.init.outputs.enable_slack == 'true' && github.event.inputs.slack_webhook_url != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "🚀 DataGenerator Started",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🚀 DataGenerator Started"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*👤 User:*\n${{ github.actor }}"
                    },
                    {
                      "type": "mrkdwn", 
                      "text": "*🕒 Started:*\n${{ steps.init.outputs.start_time }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*📈 Rows:*\n${{ github.event.inputs.rows }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*🔔 Level:*\n${{ github.event.inputs.notification_level }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*📁 Input:* ${{ github.event.inputs.input_method == 'url' && '🌐 URL' || '📂 Repository File' }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "📊 View Progress"
                      },
                      "url": "${{ steps.init.outputs.run_url }}"
                    }
                  ]
                }
              ]
            }' \
            "${{ github.event.inputs.slack_webhook_url }}"

      # Conditional issue comment
      - name: 💬 Send issue comment notification
        if: steps.init.outputs.enable_issues == 'true'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            // Find or create notifications issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'notifications',
              per_page: 1
            });
            
            let issueNumber;
            if (issues.data.length > 0) {
              issueNumber = issues.data[0].number;
            } else {
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🔔 DataGenerator Notifications Hub',
                body: 'This issue tracks DataGenerator workflow notifications. Subscribe for email updates!',
                labels: ['notifications', 'automated']
              });
              issueNumber = newIssue.data.number;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `## 🚀 DataGenerator Started - Run #${{ github.run_number }}
              
              **📊 Configuration:**
              - **👤 User**: @${{ github.actor }}
              - **🕒 Started**: ${{ steps.init.outputs.start_time }}
              - **📈 Rows**: ${{ github.event.inputs.rows }} | **⚙️ Workers**: ${{ github.event.inputs.max_workers }} | **💾 Memory**: ${{ github.event.inputs.max_memory_mb }}MB
              - **🔔 Level**: ${{ github.event.inputs.notification_level }}
              - **📥 Source**: ${{ github.event.inputs.input_method == 'url' && '🌐 URL' || '📂 Repository File' }}
              
              **🔗 [View Live Progress →](${{ steps.init.outputs.run_url }})**
              
              ---`
            });

      # Conditional webhook notification
      - name: 🔗 Send webhook start notification
        if: steps.init.outputs.enable_webhook == 'true' && github.event.inputs.custom_webhook_url != ''
        run: |
          curl -X POST -H 'Content-Type: application/json' \
            --data '{
              "event": "workflow_started",
              "workflow": "DataGenerator",
              "run_id": "${{ github.run_id }}",
              "run_number": ${{ github.run_number }},
              "actor": "${{ github.actor }}",
              "started_at": "${{ steps.init.outputs.start_time }}",
              "notification_level": "${{ github.event.inputs.notification_level }}",
              "parameters": {
                "input_method": "${{ github.event.inputs.input_method }}",
                "rows": ${{ github.event.inputs.rows }},
                "workers": ${{ github.event.inputs.max_workers }},
                "memory_mb": ${{ github.event.inputs.max_memory_mb }},
                "source": "${{ github.event.inputs.input_method == 'url' && github.event.inputs.file_url || github.event.inputs.repository_file_path }}"
              },
              "urls": {
                "workflow_run": "${{ steps.init.outputs.run_url }}",
                "repository": "https://github.com/${{ github.repository }}"
              },
              "status": "started"
            }' \
            "${{ github.event.inputs.custom_webhook_url }}"

      # Conditional email preparation
      - name: 📧 Prepare email start notification
        if: steps.init.outputs.enable_email == 'true' && github.event.inputs.email_address != ''
        run: |
          mkdir -p email_notifications
          cat > email_notifications/start_notification.txt << 'EOF'
          Subject: 🚀 DataGenerator Started - Run #${{ github.run_number }}
          To: ${{ github.event.inputs.email_address }}
          
          DataGenerator Workflow Started
          =============================
          
          Your DataGenerator workflow has started processing.
          
          Configuration:
          - User: ${{ github.actor }}
          - Started: ${{ steps.init.outputs.start_time }}
          - Notification Level: ${{ github.event.inputs.notification_level }}
          - Rows: ${{ github.event.inputs.rows }}
          - Workers: ${{ github.event.inputs.max_workers }}
          - Memory: ${{ github.event.inputs.max_memory_mb }} MB
          - Input Method: ${{ github.event.inputs.input_method }}
          - Source: ${{ github.event.inputs.input_method == 'url' && github.event.inputs.file_url || github.event.inputs.repository_file_path }}
          
          Track Progress: ${{ steps.init.outputs.run_url }}
          
          You will receive completion notification when processing finishes.
          
          ---
          Automated notification from DataGenerator
          Repository: ${{ github.repository }}
          EOF
          
          echo "📧 Email content prepared for: ${{ github.event.inputs.email_address }}"

      # Main workflow execution steps
      - name: 📁 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python with caching
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python3.9/site-packages
          key: ${{ runner.os }}-python-deps-${{ hashFiles('**/requirements.txt', '**/setup.py', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-deps-

      - name: ⚡ Install dependencies (with caching)
        run: |
          python -m pip install --upgrade pip --quiet
          if [ -f requirements.txt ]; then 
            echo "📋 Installing from requirements.txt..."
            pip install -r requirements.txt --quiet --no-warn-script-location
          else
            echo "⚠️  No requirements.txt found, installing common packages..."
            pip install pandas numpy --quiet --no-warn-script-location
          fi

      - name: 📥 Prepare input file
        run: |
          if [ "${{ github.event.inputs.input_method }}" = "url" ]; then
            echo "🌐 Downloading from URL: ${{ github.event.inputs.file_url }}"
            curl -L -o input.json "${{ github.event.inputs.file_url }}" --silent --show-error
          else
            echo "📁 Using repository file: ${{ github.event.inputs.repository_file_path }}"
            cp "${{ github.event.inputs.repository_file_path }}" input.json
          fi

      - name: ✅ Validate input file
        run: |
          if [ ! -f input.json ]; then
            echo "❌ Input file not found!"
            exit 1
          fi
          
          echo "📊 Input file details:"
          ls -lh input.json
          echo "🔍 File preview (first 10 lines):"
          head -n 10 input.json

      - name: 🧪 Validate JSON format
        run: |
          python -c "
          import json
          import sys
          try:
              with open('input.json', 'r') as f:
                  data = json.load(f)
              print('✅ JSON file is valid')
              print(f'📊 JSON structure: {len(data)} top-level items' if isinstance(data, (dict, list)) else '📊 JSON is a simple value')
          except json.JSONDecodeError as e:
              print(f'❌ Invalid JSON file: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'❌ Error reading file: {e}')
              sys.exit(1)
          "

      - name: 🚀 Run DataGenerator
        run: |
          echo "🔧 Starting DataGenerator with parameters:"
          echo "  - Rows: ${{ github.event.inputs.rows }}"
          echo "  - Workers: ${{ github.event.inputs.max_workers }}"
          echo "  - Memory: ${{ github.event.inputs.max_memory_mb }} MB"
          
          python main.py \
            -c input.json \
            -r ${{ github.event.inputs.rows }} \
            --enable_all_features \
            --output_dir output_files \
            -f csv \
            -w ${{ github.event.inputs.max_workers }} \
            -m ${{ github.event.inputs.max_memory_mb }}

      - name: 📤 Upload output artifacts
        uses: actions/upload-artifact@v4
        with:
          name: datagenerator-output-${{ github.run_number }}
          path: output_files/
          retention-days: 30

      - name: 📊 Gather completion results
        if: always()
        id: results
        run: |
          STATUS="${{ job.status }}"
          COMPLETION_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          if [ "$STATUS" = "success" ]; then
            EMOJI="🎉"
            STATUS_TEXT="✅ Completed Successfully"
            COLOR="good"
          else
            EMOJI="💥"
            STATUS_TEXT="❌ Failed"
            COLOR="danger"
          fi
          
          # Count output files and calculate sizes
          FILE_COUNT=0
          TOTAL_SIZE="0 B"
          FILE_LIST=""
          
          if [ -d "output_files" ]; then
            FILE_COUNT=$(ls output_files 2>/dev/null | wc -l)
            
            # Calculate total size (cross-platform compatible)
            if command -v du >/dev/null 2>&1; then
              TOTAL_BYTES=$(du -sb output_files 2>/dev/null | cut -f1 || echo "0")
              if [ "$TOTAL_BYTES" -gt 1048576 ]; then
                TOTAL_SIZE="$(echo "$TOTAL_BYTES" | awk '{printf "%.1fMB", $1/1048576}')"
              elif [ "$TOTAL_BYTES" -gt 1024 ]; then
                TOTAL_SIZE="$(echo "$TOTAL_BYTES" | awk '{printf "%.1fKB", $1/1024}')"
              else
                TOTAL_SIZE="${TOTAL_BYTES}B"
              fi
            fi
            
            # Create file list for notifications
            for file in output_files/*; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                FILE_LIST="$FILE_LIST\n- 📄 \`$filename\`"
              fi
            done
          fi
          
          # Set outputs for completion notifications
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "status_text=$STATUS_TEXT" >> $GITHUB_OUTPUT
          echo "emoji=$EMOJI" >> $GITHUB_OUTPUT
          echo "color=$COLOR" >> $GITHUB_OUTPUT
          echo "completion_time=$COMPLETION_TIME" >> $GITHUB_OUTPUT
          echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT
          echo "total_size=$TOTAL_SIZE" >> $GITHUB_OUTPUT
          echo "file_list<<EOF" >> $GITHUB_OUTPUT
          echo -e "$FILE_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # COMPLETION NOTIFICATIONS (ALL ENABLED METHODS)

      - name: 📋 Update workflow summary (completion)
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          
          ---
          
          # ${{ steps.results.outputs.emoji }} DataGenerator ${{ steps.results.outputs.status_text }}
          
          ## 📊 Final Results
          | Metric | Value |
          |--------|-------|
          | 📁 **Status** | ${{ steps.results.outputs.status_text }} |
          | ⏱️ **Completed** | ${{ steps.results.outputs.completion_time }} |
          | 📄 **Files Generated** | ${{ steps.results.outputs.file_count }} |
          | 💾 **Total Size** | ${{ steps.results.outputs.total_size }} |
          | 🔔 **Notification Level** | ${{ github.event.inputs.notification_level }} |
          
          ## 📄 Generated Files
          ${{ steps.results.outputs.file_list }}
          
          ## 📥 Download & Actions
          - [📦 Download All Files](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [📋 View Complete Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [🔄 Run Again](https://github.com/${{ github.repository }}/actions)
          
          ## 🔔 Notification Summary
          All enabled notification channels were updated:
          - ${{ steps.init.outputs.enable_summary == 'true' && '✅' || '❌' }} Workflow Summary (this page)
          - ${{ steps.init.outputs.enable_slack == 'true' && '✅' || '❌' }} Slack Notifications  
          - ${{ steps.init.outputs.enable_issues == 'true' && '✅' || '❌' }} Issue Comments
          - ${{ steps.init.outputs.enable_webhook == 'true' && '✅' || '❌' }} Custom Webhook
          - ${{ steps.init.outputs.enable_email == 'true' && '✅' || '❌' }} Email Preparation
          
          ---
          ${{ steps.results.outputs.emoji }} **Workflow completed at ${{ steps.results.outputs.completion_time }}**
          EOF

      - name: 📱 Send Slack completion notification
        if: steps.init.outputs.enable_slack == 'true' && github.event.inputs.slack_webhook_url != '' && always()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"${{ steps.results.outputs.emoji }} DataGenerator ${{ steps.results.outputs.status_text }}\",
              \"attachments\": [
                {
                  \"color\": \"${{ steps.results.outputs.color }}\",
                  \"fields\": [
                    {
                      \"title\": \"Status\",
                      \"value\": \"${{ steps.results.outputs.status_text }}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Files Generated\",
                      \"value\": \"${{ steps.results.outputs.file_count }}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Total Size\",
                      \"value\": \"${{ steps.results.outputs.total_size }}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Run Number\",
                      \"value\": \"#${{ github.run_number }}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Completed\",
                      \"value\": \"${{ steps.results.outputs.completion_time }}\",
                      \"short\": false
                    }
                  ],
                  \"actions\": [
                    {
                      \"type\": \"button\",
                      \"text\": \"📥 Download Results\",
                      \"url\": \"${{ steps.init.outputs.run_url }}\"
                    }
                  ]
                }
              ]
            }" \
            "${{ github.event.inputs.slack_webhook_url }}"

      - name: 💬 Send issue completion comment
        if: steps.init.outputs.enable_issues == 'true' && always()
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'notifications',
              per_page: 1
            });
            
            if (issues.data.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `## ${{ steps.results.outputs.emoji }} Run #${{ github.run_number }} ${{ steps.results.outputs.status_text }}
                
                **📊 Final Results:**
                - **⏱️ Completed**: ${{ steps.results.outputs.completion_time }}
                - **📄 Files Generated**: ${{ steps.results.outputs.file_count }}
                - **💾 Total Size**: ${{ steps.results.outputs.total_size }}
                - **📁 Status**: ${{ steps.results.outputs.status_text }}
                
                **📥 Download Results**: [Workflow Artifacts](${{ steps.init.outputs.run_url }})
                
                ---
                *🤖 Workflow completed successfully!*`
              });
            }

      - name: 🔗 Send webhook completion notification
        if: steps.init.outputs.enable_webhook == 'true' && github.event.inputs.custom_webhook_url != '' && always()
        run: |
          curl -X POST -H 'Content-Type: application/json' \
            --data "{
              \"event\": \"workflow_completed\",
              \"workflow\": \"DataGenerator\",
              \"run_id\": \"${{ github.run_id }}\",
              \"run_number\": ${{ github.run_number }},
              \"actor\": \"${{ github.actor }}\",
              \"started_at\": \"${{ steps.init.outputs.start_time }}\",
              \"completed_at\": \"${{ steps.results.outputs.completion_time }}\",
              \"repository\": \"${{ github.repository }}\",
              \"status\": \"${{ steps.results.outputs.status }}\",
              \"status_text\": \"${{ steps.results.outputs.status_text }}\",
              \"notification_level\": \"${{ github.event.inputs.notification_level }}\",
              \"results\": {
                \"files_generated\": ${{ steps.results.outputs.file_count }},
                \"total_size\": \"${{ steps.results.outputs.total_size }}\",
                \"success\": ${{ steps.results.outputs.status == 'success' }}
              },
              \"parameters\": {
                \"input_method\": \"${{ github.event.inputs.input_method }}\",
                \"rows\": ${{ github.event.inputs.rows }},
                \"workers\": ${{ github.event.inputs.max_workers }},
                \"memory_mb\": ${{ github.event.inputs.max_memory_mb }}
              },
              \"urls\": {
                \"workflow_run\": \"${{ steps.init.outputs.run_url }}\",
                \"artifacts\": \"${{ steps.init.outputs.run_url }}\",
                \"repository\": \"https://github.com/${{ github.repository }}\"
              }
            }" \
            "${{ github.event.inputs.custom_webhook_url }}"

      - name: 📧 Prepare completion email notification
        if: steps.init.outputs.enable_email == 'true' && github.event.inputs.email_address != '' && always()
        run: |
          cat > email_notifications/completion_notification.txt << EOF
          Subject: ${{ steps.results.outputs.emoji }} DataGenerator ${{ steps.results.outputs.status_text }} - Run #${{ github.run_number }}
          To: ${{ github.event.inputs.email_address }}
          
          DataGenerator Workflow ${{ steps.results.outputs.status_text }}
          =============================================
          
          Your DataGenerator workflow has completed with the following results:
          
          Final Results:
          -------------
          - Status: ${{ steps.results.outputs.status_text }}
          - Completed: ${{ steps.results.outputs.completion_time }}
          - Files Generated: ${{ steps.results.outputs.file_count }}
          - Total Size: ${{ steps.results.outputs.total_size }}
          - Notification Level: ${{ github.event.inputs.notification_level }}
          
          Generated Files:
          ---------------
          ${{ steps.results.outputs.file_list }}
          
          Configuration Used:
          ------------------
          - User: ${{ github.actor }}
          - Started: ${{ steps.init.outputs.start_time }}
          - Input Method: ${{ github.event.inputs.input_method }}
          - Rows: ${{ github.event.inputs.rows }}
          - Workers: ${{ github.event.inputs.max_workers }}
          - Memory: ${{ github.event.inputs.max_memory_mb }} MB
          
          Download Results:
          ----------------
          Access your generated files: ${{ steps.init.outputs.run_url }}
          
          ---
          Automated notification from DataGenerator
          Repository: ${{ github.repository }}
          All enabled notification channels have been updated with these results.
          EOF
          
          echo "📧 Completion email content prepared"

      - name: 📧 Upload email notifications as artifacts
        if: steps.init.outputs.enable_email == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: email-notifications-${{ github.run_number }}
          path: email_notifications/
          retention-days: 7

  # Issue-based job for file upload via issues
  run-script-issue:
    if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'data-upload')
    runs-on: ubuntu-latest
    steps:
      - name: 📢 Issue processing start notification
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 DataGenerator Processing Started!
              
              **📊 Status**: Processing your data file with enhanced notifications...
              **🕒 Started**: ${new Date().toISOString().replace('T', ' ').slice(0, 19)} UTC
              **🔗 Live Progress**: [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              **🔔 Enhancement**: Multi-channel notification system active
              
              I'll provide detailed updates when processing completes! 🎯
              
              ---
              *🤖 Automated notification from DataGenerator workflow*`
            });

      - name: 📁 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python with caching
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: ⚡ Install dependencies (cached)
        run: |
          python -m pip install --upgrade pip --quiet
          if [ -f requirements.txt ]; then 
            pip install -r requirements.txt --quiet --no-warn-script-location
          else
            pip install pandas numpy --quiet --no-warn-script-location
          fi

      - name: 📝 Extract parameters from issue
        id: extract-params
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # Extract file URL with multiple patterns
          FILE_URL=$(echo "$ISSUE_BODY" | grep -oE 'https?://[^[:space:]]+\.json[^[:space:]]*' | head -1)
          if [ -z "$FILE_URL" ]; then
            FILE_URL=$(echo "$ISSUE_BODY" | grep -oE 'https?://[^[:space:]]+' | grep -E '(raw\.githubusercontent|gist\.githubusercontent|file\.io|tmpfiles\.org)' | head -1)
          fi
          
          # Extract parameters with flexible formats
          ROWS=$(echo "$ISSUE_BODY" | grep -oiE '(rows?|count)[[:space:]]*:?[[:space:]]*([0-9]+)' | grep -oE '[0-9]+' | head -1)
          ROWS=${ROWS:-10}
          
          WORKERS=$(echo "$ISSUE_BODY" | grep -oiE '(workers?|threads?)[[:space:]]*:?[[:space:]]*([0-9]+)' | grep -oE '[0-9]+' | head -1)
          WORKERS=${WORKERS:-4}
          
          MEMORY=$(echo "$ISSUE_BODY" | grep -oiE '(memory|mem)[[:space:]]*:?[[:space:]]*([0-9]+)' | grep -oE '[0-9]+' | head -1)
          MEMORY=${MEMORY:-1024}
          
          echo "file_url=$FILE_URL" >> $GITHUB_OUTPUT
          echo "rows=$ROWS" >> $GITHUB_OUTPUT
          echo "workers=$WORKERS" >> $GITHUB_OUTPUT
          echo "memory=$MEMORY" >> $GITHUB_OUTPUT
          
          echo "🔍 Extracted parameters:"
          echo "  - File URL: $FILE_URL"
          echo "  - Rows: $ROWS"
          echo "  - Workers: $WORKERS" 
          echo "  - Memory: $MEMORY MB"

      - name: 📥 Download and validate file
        run: |
          FILE_URL="${{ steps.extract-params.outputs.file_url }}"
          if [ -z "$FILE_URL" ]; then
            echo "❌ No valid JSON file URL found in issue body"
            echo "Please provide a direct link to a JSON file in your issue."
            exit 1
          fi
          
          echo "🌐 Downloading file from: $FILE_URL"
          curl -L -o input.json "$FILE_URL" --silent --show-error

      - name: 🧪 Validate JSON format
        run: |
          python -c "
          import json
          import sys
          try:
              with open('input.json', 'r') as f:
                  json.load(f)
              print('✅ JSON file is valid')
          except json.JSONDecodeError as e:
              print(f'❌ Invalid JSON file: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'❌ Error reading file: {e}')
              sys.exit(1)
          "

      - name: 🚀 Run DataGenerator
        run: |
          echo "🔧 Starting DataGenerator with extracted parameters..."
          python main.py \
            -c input.json \
            -r ${{ steps.extract-params.outputs.rows }} \
            --enable_all_features \
            --output_dir output_files \
            -f csv \
            -w ${{ steps.extract-params.outputs.workers }} \
            -m ${{ steps.extract-params.outputs.memory }}

      - name: 📤 Upload output folder
        uses: actions/upload-artifact@v4
        with:
          name: output-folder-issue-${{ github.event.issue.number }}
          path: output_files/
          retention-days: 30

      - name: 💬 Enhanced completion comment
        if: always()
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const status = '${{ job.status }}' === 'success' ? '✅ Completed' : '❌ Failed';
            const emoji = '${{ job.status }}' === 'success' ? '🎉' : '💥';
            
            let outputInfo = '';
            let fileCount = 0;
            try {
              if (fs.existsSync('output_files')) {
                const files = fs.readdirSync('output_files');
                fileCount = files.length;
                outputInfo = files.map(f => `- 📄 \`${f}\``).join('\n');
              }
            } catch (e) {
              outputInfo = 'Files generated (list unavailable)';
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ${emoji} DataGenerator Processing ${status}!
              
              **📊 Enhanced Results:**
              - **⏱️ Completed**: ${new Date().toISOString().replace('T', ' ').slice(0, 19)} UTC
              - **📈 Rows Generated**: ${{ steps.extract-params.outputs.rows }}
              - **📄 Files Created**: ${fileCount}
              - **📁 Status**: ${status}
              - **🔔 Notification**: Enhanced multi-channel system
              
              ${outputInfo && `**📄 Generated Files:**\n${outputInfo}\n`}
              
              **📥 Multiple Download Options:**
              - [📦 Direct Artifacts Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              - [📋 Complete Workflow Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              - [🔄 Run Again](https://github.com/${{ github.repository }}/actions)
              
              ---
              *🤖 Enhanced processing complete! Thank you for using DataGenerator.*`
            });

  # Pull request job for file upload via PRs
  run-script-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: 📁 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 🐍 Setup Python with caching
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: ⚡ Install dependencies (cached)
        run: |
          python -m pip install --upgrade pip --quiet
          if [ -f requirements.txt ]; then 
            pip install -r requirements.txt --quiet --no-warn-script-location
          else
            pip install pandas numpy --quiet --no-warn-script-location
          fi

      - name: 🔍 Find uploaded JSON files
        id: find-files
        run: |
          # Find all JSON files in uploads directory
          JSON_FILES=$(find uploads/ -name "*.json" -type f 2>/dev/null || echo "")
          
          if [ -z "$JSON_FILES" ]; then
            echo "❌ No JSON files found in uploads/ directory"
            echo "Please ensure your JSON files are in the uploads/ folder"
            exit 1
          fi
          
          # Use the first JSON file found
          FIRST_FILE=$(echo "$JSON_FILES" | head -1)
          echo "input_file=$FIRST_FILE" >> $GITHUB_OUTPUT
          
          echo "🔍 Found JSON files:"
          echo "$JSON_FILES"
          echo "📁 Using file: $FIRST_FILE"

      - name: 📂 Prepare input file
        run: |
          cp "${{ steps.find-files.outputs.input_file }}" input.json
          echo "📁 Using uploaded file: ${{ steps.find-files.outputs.input_file }}"

      - name: ✅ Check and validate input file
        run: |
          echo "📊 Input file details:"
          ls -lh input.json
          echo "🔍 File preview (first 10 lines):"
          head -n 10 input.json

      - name: 🧪 Validate JSON format
        run: |
          python -c "
          import json
          import sys
          try:
              with open('input.json', 'r') as f:
                  json.load(f)
              print('✅ JSON file is valid')
          except json.JSONDecodeError as e:
              print(f'❌ Invalid JSON file: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'❌ Error reading file: {e}')
              sys.exit(1)
          "

      - name: 🚀 Run DataGenerator with default parameters
        run: |
          echo "🔧 Running DataGenerator with default parameters for PR:"
          echo "  - Rows: 10 (default)"
          echo "  - Workers: 4 (default)"
          echo "  - Memory: 1024 MB (default)"
          
          python main.py \
            -c input.json \
            -r 10 \
            --enable_all_features \
            --output_dir output_files \
            -f csv \
            -w 4 \
            -m 1024

      - name: 📤 Upload output folder
        uses: actions/upload-artifact@v4
        with:
          name: output-folder-pr-${{ github.event.pull_request.number }}
          path: output_files/
          retention-days: 30

      - name: 💬 Enhanced PR completion comment
        if: always()
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const status = '${{ job.status }}' === 'success' ? '✅ Completed' : '❌ Failed';
            const emoji = '${{ job.status }}' === 'success' ? '🎉' : '💥';
            
            let outputInfo = '';
            let fileCount = 0;
            try {
              if (fs.existsSync('output_files')) {
                const files = fs.readdirSync('output_files');
                fileCount = files.length;
                outputInfo = files.map(f => {
                  const stats = fs.statSync(`output_files/${f}`);
                  const sizeKB = (stats.size / 1024).toFixed(1);
                  return `- 📄 \`${f}\` (${sizeKB} KB)`;
                }).join('\n');
              }
            } catch (e) {
              outputInfo = 'Files generated (details unavailable)';
            }
            
            const comment = `## ${emoji} Enhanced DataGenerator Processing ${status}!
            
            **📊 PR Processing Results:**
            - **🔄 Trigger**: Pull Request #${{ github.event.pull_request.number }}
            - **📁 Input File**: \`${{ steps.find-files.outputs.input_file }}\`
            - **⏱️ Completed**: ${new Date().toISOString().replace('T', ' ').slice(0, 19)} UTC
            - **📄 Files Generated**: ${fileCount}
            - **📁 Status**: ${status}
            - **🔔 Enhancement**: Multi-channel notification system
            
            **📄 Generated Files:**
            ${outputInfo || '❌ No output files generated'}
            
            **📥 Enhanced Download Options**: 
            - [📦 Download Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [📋 View Full Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [🔄 Run Again](https://github.com/${{ github.repository }}/actions)
            
            ---
            *🤖 Enhanced PR processing complete! Multi-channel notifications active.*`;
            
            github.rest.pulls.createReview({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment,
              event: 'COMMENT'
            });