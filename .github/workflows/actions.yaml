# Optimized workflow with start notifications
name: Run DataGenerator Utility (With Notifications)

on:
  workflow_dispatch:
    inputs:
      rows:
        description: 'Number of rows need to generate'
        required: false
        default: '10'
      max_workers:
        description: 'Number of workers need to use'
        required: false
        default: 4
      max_memory_mb:
        description: 'How much memory needs to use (in MB)'
        required: false
        default: 1024
      input_method:
        description: 'Input method for JSON file'
        required: true
        type: choice
        options:
          - 'url'
          - 'repository_file'
        default: 'repository_file'
      file_url:
        description: 'URL of the input JSON file to download (only if input_method is "url")'
        required: false
        default: 'https://raw.githubusercontent.com/sunnygupta4197/DataGenerator/master/examples/example5.json'
      repository_file_path:
        description: 'Path to JSON file in repository (only if input_method is "repository_file")'
        required: false
        default: 'examples/example3.json'
      notification_method:
        description: 'How to notify when workflow starts'
        required: false
        type: choice
        options:
          - 'email_issue'
          - 'issue_comment'
          - 'slack_webhook'
          - 'none'
        default: 'email_issue'
      slack_webhook_url:
        description: 'Slack webhook URL (only if notification_method is "slack_webhook")'
        required: false

  # Issue-based file upload trigger
  issues:
    types: [opened, edited]

  # Pull request based file upload
  pull_request:
    paths: ['uploads/**/*.json']
    types: [opened, synchronize]

# Global environment variables for optimization
env:
  PYTHONUNBUFFERED: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_COLOR: 1

jobs:
  # Job for manual workflow dispatch
  run-script-manual:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: 📢 Send start notification
        id: notify-start
        run: |
          echo "🚀 DataGenerator workflow starting..."
          echo "📊 Parameters:"
          echo "  - Input Method: ${{ github.event.inputs.input_method }}"
          echo "  - Rows: ${{ github.event.inputs.rows }}"
          echo "  - Workers: ${{ github.event.inputs.max_workers }}"
          echo "  - Memory: ${{ github.event.inputs.max_memory_mb }} MB"
          echo "  - Triggered by: ${{ github.actor }}"
          echo "  - Run ID: ${{ github.run_id }}"
          
          # Set outputs for other notification steps
          echo "start_time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_OUTPUT
          echo "run_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: 📧 Create notification issue
        if: github.event.inputs.notification_method == 'email_issue'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚀 DataGenerator Started - Run #${{ github.run_number }}`,
              body: `## 🚀 DataGenerator Workflow Started
              
              **📊 Run Details:**
              - **🆔 Run ID**: [${{ github.run_id }}](${{ steps.notify-start.outputs.run_url }})
              - **👤 Triggered by**: @${{ github.actor }}
              - **🕒 Started at**: ${{ steps.notify-start.outputs.start_time }}
              - **📥 Input Method**: ${{ github.event.inputs.input_method }}
              - **📈 Rows to Generate**: ${{ github.event.inputs.rows }}
              - **⚙️ Workers**: ${{ github.event.inputs.max_workers }}
              - **💾 Memory Limit**: ${{ github.event.inputs.max_memory_mb }} MB
              
              **📁 Input Source:**
              ${`${{ github.event.inputs.input_method }}` === 'url' 
                ? `🌐 **URL**: ${{ github.event.inputs.file_url }}`
                : `📂 **Repository File**: ${{ github.event.inputs.repository_file_path }}`
              }
              
              **🔗 Actions:**
              - [📊 View Workflow Run](${{ steps.notify-start.outputs.run_url }})
              - [📋 View All Runs](https://github.com/${{ github.repository }}/actions)
              
              ---
              *This issue will be updated when the workflow completes. You can subscribe to this issue to get email notifications.*
              
              **Labels**: workflow-notification, in-progress`,
              labels: ['workflow-notification', 'in-progress']
            });
            
            // Store issue number for later updates
            require('fs').writeFileSync('notification_issue.txt', issue.data.number.toString());

      - name: 💬 Send start comment
        if: github.event.inputs.notification_method == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            // Find the latest open issue or create a comment on discussions
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'notifications',
              per_page: 1
            });
            
            let issueNumber;
            if (issues.data.length > 0) {
              issueNumber = issues.data[0].number;
            } else {
              // Create a notifications issue if none exists
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '📢 DataGenerator Notifications',
                body: 'This issue is used for DataGenerator workflow notifications. Subscribe to get updates!',
                labels: ['notifications', 'pinned']
              });
              issueNumber = newIssue.data.number;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `## 🚀 DataGenerator Started - Run #${{ github.run_number }}
              
              **📊 Quick Details:**
              - **👤 User**: @${{ github.actor }}
              - **🕒 Started**: ${{ steps.notify-start.outputs.start_time }}
              - **📈 Rows**: ${{ github.event.inputs.rows }} | **⚙️ Workers**: ${{ github.event.inputs.max_workers }} | **💾 Memory**: ${{ github.event.inputs.max_memory_mb }}MB
              - **📥 Source**: ${{ github.event.inputs.input_method == 'url' && '🌐 URL' || '📂 Repository' }}
              
              **🔗 [View Live Progress →](${{ steps.notify-start.outputs.run_url }})**
              
              ---`
            });

      - name: 📱 Send Slack notification
        if: github.event.inputs.notification_method == 'slack_webhook' && github.event.inputs.slack_webhook_url != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "🚀 DataGenerator Workflow Started",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🚀 DataGenerator Started"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*👤 User:*\n${{ github.actor }}"
                    },
                    {
                      "type": "mrkdwn", 
                      "text": "*🕒 Started:*\n${{ steps.notify-start.outputs.start_time }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*📈 Rows:*\n${{ github.event.inputs.rows }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*⚙️ Workers:*\n${{ github.event.inputs.max_workers }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "📊 View Progress"
                      },
                      "url": "${{ steps.notify-start.outputs.run_url }}"
                    }
                  ]
                }
              ]
            }' \
            ${{ github.event.inputs.slack_webhook_url }}

      - name: 📁 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python with caching
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'

      - name: 📦 Cache pip packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python3.9/site-packages
          key: ${{ runner.os }}-python-3.9-pip-${{ hashFiles('**/requirements.txt', '**/setup.py', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-3.9-pip-

      - name: ⚡ Install dependencies (cached)
        run: |
          python -m pip install --upgrade pip --quiet
          if [ -f requirements.txt ]; then 
            echo "📋 Installing from requirements.txt..."
            pip install -r requirements.txt --quiet --no-warn-script-location
          else
            echo "⚠️  No requirements.txt found, installing common packages..."
            pip install pandas numpy --quiet --no-warn-script-location
          fi

      - name: 📥 Prepare input file from URL
        if: github.event.inputs.input_method == 'url'
        run: |
          echo "🌐 Downloading file from URL: ${{ github.event.inputs.file_url }}"
          curl -L -o input.json "${{ github.event.inputs.file_url }}" --silent --show-error

      - name: 📂 Prepare input file from repository
        if: github.event.inputs.input_method == 'repository_file'
        run: |
          echo "📁 Using file from repository: ${{ github.event.inputs.repository_file_path }}"
          cp "${{ github.event.inputs.repository_file_path }}" input.json

      - name: ✅ Validate input file
        run: |
          if [ ! -f input.json ]; then
            echo "❌ Error: input.json file not found!"
            exit 1
          fi
          
          echo "📊 Input file details:"
          ls -lh input.json

      - name: 🧪 Validate JSON format
        run: |
          python -c "
          import json
          import sys
          try:
              with open('input.json', 'r') as f:
                  data = json.load(f)
              print('✅ JSON file is valid')
          except json.JSONDecodeError as e:
              print(f'❌ Invalid JSON file: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'❌ Error reading file: {e}')
              sys.exit(1)
          "

      - name: 🚀 Run DataGenerator
        run: |
          echo "🔧 Starting DataGenerator with parameters:"
          echo "  - Rows: ${{ github.event.inputs.rows }}"
          echo "  - Workers: ${{ github.event.inputs.max_workers }}"
          echo "  - Memory: ${{ github.event.inputs.max_memory_mb }} MB"
          
          python optimized_main.py \
            -c input.json \
            -r ${{ github.event.inputs.rows }} \
            --enable_all_features \
            --output_dir output_files \
            -f csv \
            -w ${{ github.event.inputs.max_workers }} \
            -m ${{ github.event.inputs.max_memory_mb }}

      - name: 📤 Upload output folder
        uses: actions/upload-artifact@v4
        with:
          name: output-folder-manual-${{ github.run_number }}
          path: output_files/
          retention-days: 30

      - name: 📧 Update notification issue (completion)
        if: github.event.inputs.notification_method == 'email_issue' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let issueNumber;
            
            try {
              issueNumber = parseInt(fs.readFileSync('notification_issue.txt', 'utf8'));
            } catch (e) {
              console.log('No notification issue found to update');
              return;
            }
            
            const status = '${{ job.status }}' === 'success' ? '✅ Completed' : '❌ Failed';
            const emoji = '${{ job.status }}' === 'success' ? '🎉' : '💥';
            
            let outputInfo = '';
            if (fs.existsSync('output_files')) {
              const files = fs.readdirSync('output_files');
              outputInfo = files.map(f => `- 📄 \`${f}\``).join('\n');
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `## ${emoji} Workflow ${status}
              
              **📊 Final Results:**
              - **⏱️ Completed**: ${new Date().toISOString().replace('T', ' ').slice(0, 19)} UTC
              - **📁 Status**: ${status}
              - **🔗 Run Details**: [View Full Log](${{ steps.notify-start.outputs.run_url }})
              
              ${outputInfo && `**📄 Generated Files:**\n${outputInfo}\n`}
              **📥 Download**: [Workflow Artifacts](${{ steps.notify-start.outputs.run_url }})
              
              ---
              *Workflow completed. This issue can be closed.*`
            });
            
            // Close the issue and update labels
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              state: 'closed',
              labels: ['workflow-notification', 'completed']
            });

      - name: 💬 Send completion comment
        if: github.event.inputs.notification_method == 'issue_comment' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'notifications',
              per_page: 1
            });
            
            if (issues.data.length === 0) return;
            
            const status = '${{ job.status }}' === 'success' ? '✅ Completed' : '❌ Failed';
            const emoji = '${{ job.status }}' === 'success' ? '🎉' : '💥';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues.data[0].number,
              body: `## ${emoji} Run #${{ github.run_number }} ${status}
              
              **⏱️ Completed**: ${new Date().toISOString().replace('T', ' ').slice(0, 19)} UTC | **🔗 [View Results →](${{ steps.notify-start.outputs.run_url }})**
              
              ---`
            });

      - name: 📱 Send Slack completion
        if: github.event.inputs.notification_method == 'slack_webhook' && github.event.inputs.slack_webhook_url != '' && always()
        run: |
          STATUS="${{ job.status }}"
          if [ "$STATUS" = "success" ]; then
            EMOJI="🎉"
            COLOR="good"
            STATUS_TEXT="Completed Successfully"
          else
            EMOJI="💥"
            COLOR="danger" 
            STATUS_TEXT="Failed"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"$EMOJI DataGenerator $STATUS_TEXT\",
              \"attachments\": [
                {
                  \"color\": \"$COLOR\",
                  \"fields\": [
                    {
                      \"title\": \"Status\",
                      \"value\": \"$STATUS_TEXT\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Run #\",
                      \"value\": \"${{ github.run_number }}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Completed\",
                      \"value\": \"$(date -u +'%Y-%m-%d %H:%M:%S UTC')\",
                      \"short\": false
                    }
                  ],
                  \"actions\": [
                    {
                      \"type\": \"button\",
                      \"text\": \"📥 View Results\",
                      \"url\": \"${{ steps.notify-start.outputs.run_url }}\"
                    }
                  ]
                }
              ]
            }" \
            ${{ github.event.inputs.slack_webhook_url }}

      - name: 📋 Generate summary
        if: always()
        run: |
          echo "## 🎉 DataGenerator Run Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **⚡ Trigger**: Manual workflow dispatch" >> $GITHUB_STEP_SUMMARY
          echo "- **📥 Input Method**: ${{ github.event.inputs.input_method }}" >> $GITHUB_STEP_SUMMARY
          echo "- **👤 Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **🕒 Started**: ${{ steps.notify-start.outputs.start_time }}" >> $GITHUB_STEP_SUMMARY
          echo "- **📊 Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  # Issue-based job with notifications
  run-script-issue:
    if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'data-upload')
    runs-on: ubuntu-latest
    steps:
      - name: 📢 Notify issue start
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 DataGenerator Processing Started!
              
              **📊 Status**: Processing your data file...
              **🕒 Started**: ${new Date().toISOString().replace('T', ' ').slice(0, 19)} UTC
              **🔗 Live Progress**: [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              I'll update this issue when processing is complete! 🎯
              
              ---
              *🤖 Automated notification from DataGenerator workflow*`
            });

      # ... rest of issue processing steps (same as before) ...
      - name: 📁 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python with caching
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: ⚡ Install dependencies (cached)
        run: |
          python -m pip install --upgrade pip --quiet
          if [ -f requirements.txt ]; then 
            pip install -r requirements.txt --quiet --no-warn-script-location
          else
            pip install pandas numpy --quiet --no-warn-script-location
          fi

      - name: 📝 Extract parameters from issue
        id: extract-params
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          FILE_URL=$(echo "$ISSUE_BODY" | grep -oE 'https?://[^[:space:]]+\.json[^[:space:]]*' | head -1)
          if [ -z "$FILE_URL" ]; then
            FILE_URL=$(echo "$ISSUE_BODY" | grep -oE 'https?://[^[:space:]]+' | grep -E '(raw\.githubusercontent|gist\.githubusercontent|file\.io|tmpfiles\.org)' | head -1)
          fi
          
          ROWS=$(echo "$ISSUE_BODY" | grep -oiE '(rows?|count)[[:space:]]*:?[[:space:]]*([0-9]+)' | grep -oE '[0-9]+' | head -1)
          ROWS=${ROWS:-10}
          
          WORKERS=$(echo "$ISSUE_BODY" | grep -oiE '(workers?|threads?)[[:space:]]*:?[[:space:]]*([0-9]+)' | grep -oE '[0-9]+' | head -1)
          WORKERS=${WORKERS:-4}
          
          MEMORY=$(echo "$ISSUE_BODY" | grep -oiE '(memory|mem)[[:space:]]*:?[[:space:]]*([0-9]+)' | grep -oE '[0-9]+' | head -1)
          MEMORY=${MEMORY:-1024}
          
          echo "file_url=$FILE_URL" >> $GITHUB_OUTPUT
          echo "rows=$ROWS" >> $GITHUB_OUTPUT
          echo "workers=$WORKERS" >> $GITHUB_OUTPUT
          echo "memory=$MEMORY" >> $GITHUB_OUTPUT

      - name: 📥 Download and validate file
        run: |
          FILE_URL="${{ steps.extract-params.outputs.file_url }}"
          if [ -z "$FILE_URL" ]; then
            echo "❌ No valid JSON file URL found"
            exit 1
          fi
          
          curl -L -o input.json "$FILE_URL" --silent --show-error
          
          python -c "
          import json
          with open('input.json', 'r') as f:
              json.load(f)
          print('✅ JSON file is valid')
          "

      - name: 🚀 Run DataGenerator
        run: |
          python main.py \
            -c input.json \
            -r ${{ steps.extract-params.outputs.rows }} \
            --enable_all_features \
            --output_dir output_files \
            -f csv \
            -w ${{ steps.extract-params.outputs.workers }} \
            -m ${{ steps.extract-params.outputs.memory }}

      - name: 📤 Upload output folder
        uses: actions/upload-artifact@v4
        with:
          name: output-folder-issue-${{ github.event.issue.number }}
          path: output_files/
          retention-days: 30

      - name: 💬 Final completion comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const status = '${{ job.status }}' === 'success' ? '✅ Completed' : '❌ Failed';
            const emoji = '${{ job.status }}' === 'success' ? '🎉' : '💥';
            
            let outputInfo = '';
            if (fs.existsSync('output_files')) {
              const files = fs.readdirSync('output_files');
              outputInfo = files.map(f => `- 📄 \`${f}\``).join('\n');
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ${emoji} DataGenerator Processing ${status}!
              
              **📊 Results:**
              - **⏱️ Completed**: ${new Date().toISOString().replace('T', ' ').slice(0, 19)} UTC
              - **📈 Rows Generated**: ${{ steps.extract-params.outputs.rows }}
              - **📁 Status**: ${status}
              
              ${outputInfo && `**📄 Generated Files:**\n${outputInfo}\n`}
              **📥 Download**: [Workflow Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              ---
              *🤖 Processing complete! Thank you for using DataGenerator.*`
            });